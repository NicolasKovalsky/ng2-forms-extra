{"version":3,"file":"input.directive.js","sourceRoot":"","sources":["input.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    Directive,\n    Input,\n    AfterViewInit,\n    OnDestroy,\n    QueryList,\n    ContentChildren,\n    AfterContentInit,\n    OnInit,\n    forwardRef\n} from \"@angular/core\";\nimport {AbstractControl, AbstractControlDirective, NgControl} from \"@angular/forms\";\nimport {Subscription} from \"rxjs\";\nimport {InputService} from \"./input.service\";\nimport {SubmitService} from \"./submit.service\";\nimport {RegistryHandle} from \"./model\";\n\nconst resolved = Promise.resolve();\n\ninterface InputStatus {\n    invalid: boolean;\n    dirty: boolean;\n    touched: boolean;\n}\n\n@Directive({\n    selector: '[inputStatus]',\n    exportAs: \"frexInput\",\n    providers: [{\n        provide: InputService,\n        useExisting: forwardRef(() => InputDirective),\n    }]\n})\nexport class InputDirective extends InputService implements OnInit, AfterViewInit, AfterContentInit, OnDestroy {\n\n    @ContentChildren(NgControl)\n    private _inputs: QueryList<AbstractControlDirective>;\n    private _controls: AbstractControl[] = [];\n    private _input: AbstractControl;\n    private _contentSubscr?: Subscription;\n    private _readyHandle?: RegistryHandle;\n    private _preSubmitSubscr?: Subscription;\n    private _controlsSubscr?: Subscription;\n    private _ready = true;\n    private _status: InputStatus = {\n        invalid: false,\n        dirty: false,\n        touched: false,\n    };\n\n    constructor(private _submitService: SubmitService) {\n        super();\n    }\n\n    @Input()\n    set inputStatus(input: AbstractControl) {\n        if (this._input === input) {\n            return;\n        }\n        this._input = input;\n        this.unsubscribe();\n        this.subscribe();\n    }\n\n    get controls(): AbstractControl[] {\n        return this._controls;\n    }\n\n    set controls(controls: AbstractControl[]) {\n        this._controls = controls;\n        this.controlChanges.emit(this._controls);\n        this._controls.forEach(control => control.updateValueAndValidity())\n    }\n\n    get ready(): boolean {\n        return this._ready;\n    }\n\n    ngAfterViewInit() {\n        this.subscribe();\n    }\n\n    ngAfterContentInit() {\n        if (!this._contentSubscr) {\n            this.subscribe();\n        }\n    }\n\n    ngOnInit() {\n        this._readyHandle = this._submitService.addReadyForSubmit(this);\n        this._preSubmitSubscr = this._submitService.preSubmit.subscribe(() => this.updateReadyState());\n        this._controlsSubscr = this.controlChanges.subscribe((controls: AbstractControl[]) => {\n\n            const statuses = new Array<InputStatus>(controls.length);\n\n            controls.forEach((control, index) => {\n\n                const updateControlStatus = () => resolved.then(() => {\n                    statuses[index] = {\n                        invalid: !!control.invalid,\n                        dirty: !!control.dirty,\n                        touched: !!control.touched,\n                    };\n                    this.updateStatus(statuses);\n                });\n\n                control.statusChanges.subscribe(updateControlStatus);\n                updateControlStatus();\n            });\n        });\n    }\n\n    updateReadyState({emitEvents = true}: {emitEvents?: boolean} = {}): boolean {\n\n        const ready = !(this._status.invalid && (this._status.dirty || this._submitService.submitted));\n\n        if (ready !== this._ready) {\n            this._ready = ready;\n            if (emitEvents !== false) {\n                this.readyStateChanges.emit(ready);\n            }\n        }\n\n        return ready;\n    }\n\n    private updateStatus(statuses: InputStatus[]) {\n\n        const newStatus = {\n            invalid: false,\n            dirty: false,\n            touched: false,\n        };\n\n        statuses.forEach(\n            status => {\n                newStatus.invalid = newStatus.invalid || status.invalid;\n                newStatus.dirty = newStatus.dirty || status.dirty;\n                newStatus.touched = newStatus.touched || status.touched;\n            });\n\n        this._status = newStatus;\n        this.updateReadyState();\n    }\n\n    ngOnDestroy() {\n        if (this._readyHandle) {\n            this._readyHandle.unregister();\n            delete this._readyHandle;\n        }\n        if (this._preSubmitSubscr) {\n            this._preSubmitSubscr.unsubscribe();\n            delete this._preSubmitSubscr;\n        }\n        if (this._controlsSubscr) {\n            this._controlsSubscr.unsubscribe();\n            delete this._controlsSubscr;\n        }\n        this.unsubscribe();\n    }\n\n    private subscribe() {\n        if (this._input) {\n            this.controls = [this._input];\n        } else if (this._inputs) {\n            this._contentSubscr = this._inputs.changes.subscribe(() => this.updateInputs());\n            this.updateInputs();\n        }\n    }\n\n    private updateInputs() {\n        this.controls = this._inputs.map(ctr => ctr.control);\n    }\n\n    private unsubscribe() {\n        if (this._contentSubscr) {\n            this._contentSubscr.unsubscribe();\n            this._contentSubscr = undefined;\n        }\n        this.controls = [];\n    }\n\n}\n"]}