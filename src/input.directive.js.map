{"version":3,"file":"input.directive.js","sourceRoot":"","sources":["input.directive.ts"],"names":[],"mappings":";;;;;;;;;;;;;;OAAO,EAAC,SAAS,EAAqB,UAAU,EAAC,MAAM,eAAe;OAE/D,EAAiB,YAAY,EAAE,aAAa,EAAE,WAAW,EAAC,MAAM,SAAS;AAgBhF;IAAoC,kCAAY;IAK5C,wBAAoB,cAA6B;QAC7C,iBAAO,CAAC;QADQ,mBAAc,GAAd,cAAc,CAAe;IAEjD,CAAC;IAED,iCAAQ,GAAR;QAAA,iBAGC;QAFG,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAC3D,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,SAAS,CAAC,cAAM,OAAA,KAAI,CAAC,gBAAgB,EAAE,EAAvB,CAAuB,CAAC,CAAC;IACnG,CAAC;IAED,oCAAW,GAAX;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;YAC7B,OAAO,IAAI,CAAC,UAAU,CAAC;QAC3B,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,CAAC;YACpC,OAAO,IAAI,CAAC,gBAAgB,CAAC;QACjC,CAAC;IACL,CAAC;IArCL;QAAC,SAAS,CAAC;YACP,QAAQ,EAAE,eAAe;YACzB,QAAQ,EAAE,WAAW;YACrB,SAAS,EAAE;gBACP;oBACI,OAAO,EAAE,YAAY;oBACrB,WAAW,EAAE,UAAU,CAAC,cAAM,OAAA,cAAc,EAAd,CAAc,CAAC;iBAChD;gBACD;oBACI,OAAO,EAAE,WAAW;oBACpB,WAAW,EAAE,YAAY;iBAC5B;aACJ;SACJ,CAAC;;sBAAA;IA0BF,qBAAC;AAAD,CAAC,AAzBD,CAAoC,YAAY,GAyB/C","sourcesContent":["import {Directive, OnDestroy, OnInit, forwardRef} from \"@angular/core\";\nimport {Subscription} from \"rxjs\";\nimport {RegistryHandle, InputService, SubmitService, SubmitGroup} from \"./model\";\n\n@Directive({\n    selector: '[inputStatus]',\n    exportAs: \"frexInput\",\n    providers: [\n        {\n            provide: InputService,\n            useExisting: forwardRef(() => InputDirective),\n        },\n        {\n            provide: SubmitGroup,\n            useExisting: InputService,\n        },\n    ]\n})\nexport class InputDirective extends InputService implements OnInit, OnDestroy {\n\n    private _regHandle?: RegistryHandle;\n    private _preSubmitSubscr?: Subscription;\n\n    constructor(private _submitService: SubmitService) {\n        super();\n    }\n\n    ngOnInit() {\n        this._regHandle = this._submitService.addSubmittable(this);\n        this._preSubmitSubscr = this._submitService.preSubmit.subscribe(() => this.updateReadyState());\n    }\n\n    ngOnDestroy() {\n        if (this._regHandle) {\n            this._regHandle.unregister();\n            delete this._regHandle;\n        }\n        if (this._preSubmitSubscr) {\n            this._preSubmitSubscr.unsubscribe();\n            delete this._preSubmitSubscr;\n        }\n    }\n\n}\n"]}