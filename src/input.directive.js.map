{"version":3,"sources":["input.directive.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAA,SAAE,EAA6B,UAAA,EAAW,MAAM,eAAA,CAAgB;AAEvE,OAAO,EAAiB,YAAA,EAAc,aAAA,EAAe,WAAA,EAAY,MAAM,SAAA,CAAU;AAGjF;IAAoC,kCAAY;IAK5C,wBAAoB,cAA6B;QAAjD,YACI,iBAAO,SACV;QAFmB,oBAAc,GAAd,cAAc,CAAe;;IAEjD,CAAC;IAED,iCAAQ,GAAR;QAAA,iBAGC;QAFG,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAC3D,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,SAAS,CAAC,cAAM,OAAA,KAAI,CAAC,iBAAiB,EAAE,EAAxB,CAAwB,CAAC,CAAC;IACpG,CAAC;IAED,oCAAW,GAAX;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;YAC7B,OAAO,IAAI,CAAC,UAAU,CAAC;QAC3B,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,CAAC;YACpC,OAAO,IAAI,CAAC,gBAAgB,CAAC;QACjC,CAAC;IACL,CAAC;IAsBL,qBAAC;AAAD,CA7CA,AA6CC,CA7CmC,YAAY;;AAyBzC,yBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACtB,QAAQ,EAAE,4BAA4B;gBACtC,QAAQ,EAAE,WAAW;gBACrB,SAAS,EAAE;oBACP;wBACI,OAAO,EAAE,YAAY;wBACrB,WAAW,EAAE,UAAU,CAAC,cAAM,OAAA,cAAc,EAAd,CAAc,CAAC;qBAChD;oBACD;wBACI,OAAO,EAAE,WAAW;wBACpB,WAAW,EAAE,YAAY;qBAC5B;iBACJ;aACJ,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,6BAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,aAAa,GAAG;CACtB,EAF6F,CAE7F,CAAC","file":"input.directive.js","sourceRoot":"","sourcesContent":["import {Directive, OnDestroy, OnInit, forwardRef} from \"@angular/core\";\nimport {Subscription} from \"rxjs\";\nimport {RegistryHandle, InputService, SubmitService, SubmitGroup} from \"./model\";\n\n\nexport class InputDirective extends InputService implements OnInit, OnDestroy {\n\n    private _regHandle?: RegistryHandle;\n    private _preSubmitSubscr?: Subscription;\n\n    constructor(private _submitService: SubmitService) {\n        super();\n    }\n\n    ngOnInit() {\n        this._regHandle = this._submitService.addSubmittable(this);\n        this._preSubmitSubscr = this._submitService.preSubmit.subscribe(() => this.updateInputStatus());\n    }\n\n    ngOnDestroy() {\n        if (this._regHandle) {\n            this._regHandle.unregister();\n            delete this._regHandle;\n        }\n        if (this._preSubmitSubscr) {\n            this._preSubmitSubscr.unsubscribe();\n            delete this._preSubmitSubscr;\n        }\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: '[inputStatus],[inputGroup]',\n    exportAs: \"frexInput\",\n    providers: [\n        {\n            provide: InputService,\n            useExisting: forwardRef(() => InputDirective),\n        },\n        {\n            provide: SubmitGroup,\n            useExisting: InputService,\n        },\n    ]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: SubmitService, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}