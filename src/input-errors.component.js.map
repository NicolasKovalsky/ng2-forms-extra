{"version":3,"file":"input-errors.component.js","sourceRoot":"","sources":["input-errors.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {Component, Input, OnDestroy, Optional, OnInit} from \"@angular/core\";\nimport {AbstractControl} from \"@angular/forms\";\nimport {Subscription} from \"rxjs\";\nimport {InputService, SubmittableControl} from \"./model\";\n\nexport interface InputErrorMap {\n    [key: string]: string | ((error: any, control: AbstractControl) => string)\n}\n\nconst DEFAULT_INPUT_ERRORS_MAP: InputErrorMap = {\n    required: \"This field is required\",\n    minlength: (error: {requiredLength: number}) => {\n        if (error && error.requiredLength > 0) {\n            return \"The value should be at least \" + error.requiredLength + \" characters long\";\n        }\n        return \"The value is too short\";\n    },\n    maxlength: (error: {requiredLength: number}) => {\n        if (error && error.requiredLength > 0) {\n            return \"The value should be at most \" + error.requiredLength + \" characters long\";\n        }\n        return \"The value is too long\";\n    },\n};\n\nexport interface InputError {\n    key: string;\n    message: string;\n}\n\nconst resolved = Promise.resolve();\n\n@Component({\n    selector: 'input-errors,[inputErrors],[inputErrorsMap]',\n    template:\n    `\n    <ul class=\"frex-error-list\" *ngIf=\"hasErrors\">\n        <li *ngFor=\"let error of errors; trackBy: trackError\" class=\"frex-error\">{{error.message}}</li>\n    </ul>\n    `,\n    host: {\n        '[class.frex-errors]': 'true',\n        '[class.frex-errors-hidden]': '!hasErrors',\n    }\n})\nexport class InputErrorsComponent implements OnInit, OnDestroy {\n\n    private _subscription?: Subscription;\n    private _errors: InputError[] = [];\n\n    @Input()\n    private inputErrorsMap: InputErrorMap = {};\n\n    constructor(@Optional() private _inputService: InputService) {\n    }\n\n    get hasErrors(): boolean {\n        return !this._inputService.ready && this.errors.length > 0;\n    }\n\n    get errors(): InputError[] {\n        return this._errors;\n    }\n\n    ngOnInit() {\n        this._subscription = this._inputService.submittableChanges.subscribe(\n            (controls: SubmittableControl[]) => this.updateInputs(controls));\n        this.updateInputs(this._inputService.submittables);\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) {\n            this._subscription.unsubscribe();\n            delete this._subscription;\n        }\n    }\n\n    private trackError(error: InputError) {\n        return error.key;\n    }\n\n    private updateInputs(controls: SubmittableControl[]) {\n\n        const updateErrors = () => resolved.then(() => {\n            this._errors.splice(0);\n            controls.map(s => s.control).filter(control => !!control.errors).forEach(control => {\n\n                const errors = control.errors;\n\n                for (let key in errors) {\n                    if (errors.hasOwnProperty(key)) {\n\n                        const message = this.errorMessage(control, key, errors[key]);\n\n                        if (message != null) {\n                            this._errors.push({key, message});\n                        }\n                    }\n                }\n            });\n        });\n\n        controls.forEach(s => s.control.statusChanges.subscribe(updateErrors));\n        updateErrors();\n    }\n\n    private errorMessage(control: AbstractControl, key: string, value: any): string | undefined {\n        if (value == null) {\n            return undefined;\n        }\n\n        const known = this.inputErrorsMap[key];\n\n        if (known != null) {\n            return errorMessage(control, value, known);\n        }\n\n        const defaultMsg = errorMessage(control, value, DEFAULT_INPUT_ERRORS_MAP[key]);\n\n        if (defaultMsg != null) {\n            return defaultMsg;\n        }\n        if (typeof value === \"string\") {\n            return value;\n        }\n\n        return key;\n    }\n\n}\n\nfunction errorMessage(\n    control: AbstractControl,\n    value: any,\n    message: undefined | string | ((value: any, control: AbstractControl) => string)): string | undefined {\n    if (message == null) {\n        return undefined;\n    }\n    if (typeof message === \"string\") {\n        return message;\n    }\n    return message(value, control);\n}\n"]}