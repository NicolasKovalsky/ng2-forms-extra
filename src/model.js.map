{"version":3,"file":"model.js","sourceRoot":"","sources":["model.ts"],"names":[],"mappings":"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","sourcesContent":["import {EventEmitter} from \"@angular/core\";\nimport {AbstractControl} from \"@angular/forms\";\nimport {Subscription} from \"rxjs\";\nimport {InputStatus, InputReady} from \"./input-status\";\n\n/**\n * Submittable interface.\n *\n * Submittables (e.g. form inputs) could be submitted at once via {{SubmitService}}.\n *\n * Submittable is responsible for its input status indication and updates.\n */\nexport abstract class Submittable {\n\n    /**\n     * Current input status of this submittable.\n     */\n    abstract readonly inputStatus: InputStatus;\n\n    /**\n     * Input status changes event emitter.\n     */\n    abstract readonly inputStatusChange: EventEmitter<InputStatus>;\n\n    /**\n     * Whether this submittable is ready to be submitted.\n     *\n     * @return {boolean} the value of `.inputStatus.ready` field.\n     */\n    get ready(): boolean {\n        return this.inputStatus.ready;\n    }\n\n    /**\n     * An errors associated with this submittable.\n     *\n     * @return {{}|undefined} the value of `.inputStatus.errors` field.\n     */\n    get errors(): {[key: string]: any} | undefined {\n        return this.inputStatus.errors;\n    }\n\n    /**\n     * Updates input status.\n     *\n     * @param emitEvents whether to emit input status change events. `true` by default.\n     */\n    abstract updateInputStatus({emitEvents}?: {emitEvents?: boolean}): InputStatus;\n\n}\n\n/**\n * A registry handle, that can be used to unregister previously registered entity.\n *\n * An instance of this class is typically returned form registration methods and can be used to revert their effect.\n */\nexport interface RegistryHandle {\n\n    /**\n     * Unregisters the entity that were registered by the method call returned this handle instance.\n     *\n     * Subsequent calls to this method won't have any effect.\n     */\n    unregister(): void;\n\n}\n\n/**\n * A utility registry implementation.\n */\nexport class Registry<T> {\n\n    readonly changes = new EventEmitter<T[]>();\n    private _map: {[id: string]: T} = {};\n    private _list?: T[];\n    private _idSeq = 0;\n\n    get list(): T[] {\n        if (this._list) {\n            return this._list;\n        }\n\n        const list: T[] = [];\n\n        for (let id in this._map) {\n            if (this._map.hasOwnProperty(id)) {\n                list.push(this._map[id]);\n            }\n        }\n\n        return this._list = list;\n    }\n\n    add(item: T, handle?: RegistryHandle | (() => void)): RegistryHandle {\n\n        const unregister = !handle ? (() => {}) : typeof handle === \"function\" ? handle : (() => handle.unregister());\n        const id = \"\" + ++this._idSeq;\n        const self = this;\n\n        this._map[id] = item;\n        this._list = undefined;\n        this.changes.emit(this.list);\n\n        return {\n            unregister() {\n                delete self._map[id];\n                self._list = undefined;\n                self.changes.emit(self.list);\n                unregister();\n            }\n        }\n    }\n\n}\n\nconst resolved = Promise.resolve();\n\n/**\n * A group of submittables represented as one submittable.\n *\n * The submittables could be added to the group with `addSubmittable()` methods.\n *\n * The input status of this group is combined from the added submittables' input statuses with `InputStatus.merge()`\n * method.\n *\n * This is a base class for concrete injectable service implementations. It is also used as a provider token.\n */\nexport abstract class SubmitGroup extends Submittable {\n\n    readonly inputStatusChange = new EventEmitter<InputStatus>();\n    private _registry = new Registry<Submittable>();\n    private _inputStatus = InputReady;\n\n    constructor() {\n        super();\n    }\n\n    get inputStatus(): InputStatus {\n        return this._inputStatus;\n    }\n\n    /**\n     * An event emitter reporting on submittable list changes, i.e. submittable additions or removals.\n     *\n     * @return {EventEmitter<Submittable[]>}\n     */\n    get submittableChanges(): EventEmitter<Submittable[]> {\n        return this._registry.changes;\n    }\n\n    /**\n     * Submittables added to this group.\n     *\n     * @return {Submittable[]} an array of submittables.\n     */\n    get submittables(): Submittable[] {\n        return this._registry.list;\n    }\n\n    updateInputStatus({emitEvents = true}: {emitEvents?: boolean} = {}): InputStatus {\n\n        const status = this.submittables.reduce(\n            (combined, s) => combined.merge(s.updateInputStatus({emitEvents: false})),\n            InputReady);\n\n        this.setInputStatus(status, {emitEvents});\n\n        return status;\n    }\n\n    protected setInputStatus(status: InputStatus, {emitEvents = true}: {emitEvents?: boolean} = {}) {\n        if (this._inputStatus.equals(status)) {\n            return;\n        }\n        this._inputStatus = status;\n        if (emitEvents !== false) {\n            this.inputStatusChange.emit(status);\n        }\n    }\n\n    /**\n     * Adds submittable to this group.\n     *\n     * The addition would be reported by `submittableChanges` event emitter.\n     *\n     * @param submittable a submittable to add.\n     *\n     * @return {RegistryHandle} a handle that can be used to remove the `submittable` from this group. The removal\n     * would be reported by `submittableChanges` event emitter.\n     */\n    addSubmittable(submittable: Submittable): RegistryHandle {\n\n        let subscr: Subscription;\n        const reg = this.registerSubmittable(submittable);\n        const handle = this._registry.add(submittable, () => {\n            subscr && subscr.unsubscribe();\n            try {\n                reg.unregister();\n            } finally {\n                this.updateInputStatus();\n            }\n        });\n\n        this.updateInputStatus();\n        subscr = submittable.inputStatusChange.subscribe(() => resolved.then(() => this.updateInputStatus()));\n\n        return handle;\n    }\n\n    protected registerSubmittable(_submittable: Submittable): RegistryHandle {\n        return {\n            unregister() {}\n        }\n    }\n\n}\n\n/**\n * Input service.\n *\n * An input service is registered by {{InputDirective}} to group one or more input fields.\n */\nexport abstract class InputService extends SubmitGroup {\n}\n\n/**\n * Submit service.\n *\n * A submit service is registered alongside Angular forms by {{SubmitReadyDirective}}. The input fields are added\n * to this service automatically (either directly, or by {{InputService}}). It can be used to submit such forms when\n * they are ready.\n */\nexport abstract class SubmitService extends SubmitGroup {\n\n    /**\n     * Emits an event on attempt to submit.\n     */\n    abstract readonly preSubmit: EventEmitter<any>;\n\n    /**\n     * Emits an event on attempt to submit and all inputs are ready to be submitted.\n     */\n    abstract readonly submitReady: EventEmitter<any>;\n\n    protected _submitted = false;\n\n    /**\n     * Whether an attempt to submit this form were performed.\n     *\n     * @return {boolean} `true` if `.submit()` method is called.\n     */\n    get submitted(): boolean {\n        return this._submitted;\n    }\n\n    /**\n     * Attempts to submit a form.\n     *\n     * - Sets `.submitted` flag.\n     * - Emits `.preSubmit` event.\n     * - Updates input statuses of all registered submittables with `Submittable.updateInputStatus()`\n     * - If ALL submittables are ready to be submitted, emits a `.submitReady` event.\n     */\n    abstract submit(): boolean;\n\n    /**\n     * Resets a submitted flag.\n     */\n    resetSubmitted(): void {\n        this._submitted = false;\n    }\n\n}\n"]}