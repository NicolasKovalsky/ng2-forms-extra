{"version":3,"file":"model.js","sourceRoot":"","sources":["model.ts"],"names":[],"mappings":"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","sourcesContent":["import {EventEmitter} from \"@angular/core\";\nimport {AbstractControl} from \"@angular/forms\";\nimport {Subscription} from \"rxjs\";\n\nexport interface Submittable {\n\n    readonly ready: boolean;\n\n    readonly readyStateChanges: EventEmitter<boolean>;\n\n    updateReadyState(opts?: {emitEvents?: boolean}): boolean;\n\n}\n\nexport interface RegistryHandle {\n\n    unregister(): void;\n\n}\n\nexport class Registry<T> {\n\n    readonly changes = new EventEmitter<T[]>();\n    private _map: {[id: string]: T} = {};\n    private _list?: T[];\n    private _idSeq = 0;\n\n    get list(): T[] {\n        if (this._list) {\n            return this._list;\n        }\n\n        const list: T[] = [];\n\n        for (let id in this._map) {\n            if (this._map.hasOwnProperty(id)) {\n                list.push(this._map[id]);\n            }\n        }\n\n        return this._list = list;\n    }\n\n    add(item: T, handle?: RegistryHandle | (() => void)): RegistryHandle {\n\n        const unregister = !handle ? (() => {}) : typeof handle === \"function\" ? handle : (() => handle.unregister());\n        const id = \"\" + ++this._idSeq;\n        const self = this;\n\n        this._map[id] = item;\n        this._list = undefined;\n        this.changes.emit(this.list);\n\n        return {\n            unregister() {\n                delete self._map[id];\n                self._list = undefined;\n                self.changes.emit(self.list);\n                unregister();\n            }\n        }\n    }\n\n}\n\nconst resolved = Promise.resolve();\n\nexport abstract class SubmitGroup<S extends Submittable> implements Submittable {\n\n    readonly readyStateChanges = new EventEmitter<boolean>();\n    private _registry = new Registry<S>();\n    private _ready = true;\n\n    get ready(): boolean {\n        return this._ready;\n    }\n\n    get submittableChanges(): EventEmitter<S[]> {\n        return this._registry.changes;\n    }\n\n    get submittables(): S[] {\n        return this._registry.list;\n    }\n\n    updateReadyState({emitEvents = true}: {emitEvents?: boolean} = {}): boolean {\n\n        const ready = !this.submittables.some(s => !s.updateReadyState({emitEvents: false}));\n\n        this.setReadyState(ready, {emitEvents});\n\n        return ready;\n    }\n\n    protected setReadyState(ready: boolean, {emitEvents = true}: {emitEvents?: boolean} = {}) {\n        if (this._ready === ready) {\n            return;\n        }\n        this._ready = ready;\n        if (emitEvents !== false) {\n            this.readyStateChanges.emit(ready);\n        }\n    }\n\n    addSubmittable(submittable: S): RegistryHandle {\n\n        let subscr: Subscription;\n        const reg = this.registerSubmittable(submittable);\n        const handle = this._registry.add(submittable, () => {\n            subscr && subscr.unsubscribe();\n            try {\n                reg.unregister();\n            } finally {\n                this.updateReadyState();\n            }\n        });\n\n        this.updateReadyState();\n        subscr = submittable.readyStateChanges.subscribe((ready: boolean) => {\n            if (!ready) {\n                resolved.then(() => this.setReadyState(false));\n            } else {\n                resolved.then(() => this.updateReadyState());\n            }\n        });\n\n        return handle;\n    }\n\n    protected registerSubmittable(_submittable: S): RegistryHandle {\n        return {\n            unregister() {}\n        }\n    }\n\n}\n\nexport interface SubmittableControl extends Submittable {\n\n    readonly control: AbstractControl;\n\n}\n\nexport abstract class InputService extends SubmitGroup<SubmittableControl> {\n\n}\n\nexport abstract class SubmitService extends SubmitGroup<Submittable> {\n\n    abstract readonly preSubmit: EventEmitter<any>;\n    abstract readonly submitReady: EventEmitter<any>;\n\n    protected _submitted = false;\n\n    get submitted(): boolean {\n        return this._submitted;\n    }\n\n    abstract submit(): boolean;\n\n    resetSubmitted(): void {\n        this._submitted = false;\n    }\n\n}\n"]}