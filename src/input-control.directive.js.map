{"version":3,"file":"input-control.directive.js","sourceRoot":"","sources":["input-control.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import {Directive, Host, OnInit, OnDestroy, EventEmitter, Optional} from \"@angular/core\";\nimport {NgControl, AbstractControl} from \"@angular/forms\";\nimport {Subscription} from \"rxjs\";\nimport {Submittable, SubmitGroup, RegistryHandle, SubmitService, InputService, SubmittableControl} from \"./model\";\nimport {InputStatus, InputErrors, InputReady, InputNotReady} from \"./input-status\";\n\n@Directive({\n    selector: '[ngModel],[formControl],[formControlName]'\n})\nexport class InputControlDirective extends SubmittableControl implements OnInit, OnDestroy {\n\n    readonly inputStatusChange = new EventEmitter<InputStatus>();\n    private _inputStatus = InputReady;\n    private _regHandle?: RegistryHandle;\n    private _preSubmitSubscr?: Subscription;\n    private _stateSubscr?: Subscription;\n\n    constructor(\n        @Optional() private _inputService: InputService,\n        private _submitGroup: SubmitGroup<Submittable>,\n        private _submitService: SubmitService,\n        @Host() private _control: NgControl) {\n        super();\n    }\n\n    get inputStatus(): InputStatus {\n        return this._inputStatus;\n    }\n\n    get control(): AbstractControl {\n        return this._control.control;\n    }\n\n    updateInputStatus({emitEvents = true}: {emitEvents?: boolean} = {}): InputStatus {\n\n        let status = this.inputReadiness();\n\n        status = this.addErrors(status);\n\n        if (!status.equals(this._inputStatus)) {\n            this._inputStatus = status;\n            if (emitEvents !== false) {\n                this.inputStatusChange.emit(status);\n            }\n        }\n\n        return status;\n    }\n\n    private inputReadiness() {\n\n        const ready = !(this.control.invalid && (this.control.dirty || this._submitService.submitted));\n\n        return ready ? InputReady : InputNotReady;\n    }\n\n    private addErrors(status: InputStatus) {\n\n        const errors = this.control.errors;\n\n        if (errors) {\n            return status.merge(new InputErrors(errors));\n        }\n\n        return status;\n    }\n\n    ngOnInit() {\n        this._preSubmitSubscr = this._submitService.preSubmit.subscribe(() => this.updateInputStatus());\n        this._stateSubscr = this.control.statusChanges.subscribe(() => this.updateInputStatus());\n        this.updateInputStatus({emitEvents: false});\n        this._regHandle =\n            this._inputService ? this._inputService.addSubmittable(this) : this._submitGroup.addSubmittable(this);\n    }\n\n    ngOnDestroy() {\n        if (this._regHandle) {\n            this._regHandle.unregister();\n            delete this._regHandle;\n        }\n        if (this._stateSubscr) {\n            this._stateSubscr.unsubscribe();\n            delete this._stateSubscr;\n        }\n        if (this._preSubmitSubscr) {\n            this._preSubmitSubscr.unsubscribe();\n            delete this._preSubmitSubscr;\n        }\n    }\n\n}\n"]}