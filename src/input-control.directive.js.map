{"version":3,"sources":["input-control.directive.ts"],"names":[],"mappings":"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","file":"input-control.directive.js","sourceRoot":"","sourcesContent":["import {Directive, Host, OnInit, OnDestroy, EventEmitter, Optional} from \"@angular/core\";\nimport {NgControl, AbstractControl} from \"@angular/forms\";\nimport {Subscription} from \"rxjs\";\nimport {Submittable, SubmitGroup, RegistryHandle, SubmitService} from \"./model\";\nimport {InputStatus, InputReady, InputNotReady, inputErrors} from \"./input-status\";\nimport {inputStatusControl} from \"./input-status\";\nimport {stat} from \"fs\";\n\n\nexport class InputControlDirective extends Submittable implements OnInit, OnDestroy {\n\n    readonly inputStatusChange = new EventEmitter<InputStatus>();\n    private _inputStatus = InputReady;\n    private _regHandle?: RegistryHandle;\n    private _preSubmitSubscr?: Subscription;\n    private _stateSubscr?: Subscription;\n\n    constructor(\n         private _control: NgControl,\n         private _submitGroup?: SubmitGroup,\n         private _submitService?: SubmitService) {\n        super();\n    }\n\n    get inputStatus(): InputStatus {\n        return this._inputStatus;\n    }\n\n    get control(): AbstractControl | undefined {\n        return this._control.control || undefined;\n    }\n\n    updateInputStatus({emitEvents = true}: {emitEvents?: boolean} = {}): InputStatus {\n\n        let status = inputStatusControl(this.control);\n\n        status = this.addReadiness(status);\n        status = this.addErrors(status);\n\n        if (!status.equals(this._inputStatus)) {\n            this._inputStatus = status;\n            if (emitEvents !== false) {\n                this.inputStatusChange.emit(status);\n            }\n        }\n\n        return status;\n    }\n\n    private addReadiness(status: InputStatus) {\n\n        const control = this.control;\n\n        if (!control) {\n            return status.merge(InputReady);\n        }\n\n        const affected = control.dirty || !this._submitService || this._submitService.submitted;\n        const ready = !(control.invalid && affected);\n\n        return status.merge(ready ? InputReady : InputNotReady);\n    }\n\n    private addErrors(status: InputStatus) {\n\n        const control = this.control;\n\n        if (!control) {\n            return status;\n        }\n\n        const errors = control.errors;\n\n        if (errors) {\n            return status.merge(inputErrors(errors));\n        }\n\n        return status;\n    }\n\n    ngOnInit() {\n        this._preSubmitSubscr =\n            this._submitService && this._submitService.preSubmit.subscribe(() => this.updateInputStatus());\n\n        const control = this.control;\n\n        if (control) {\n            this._stateSubscr = control.statusChanges.subscribe(() => this.updateInputStatus());\n        }\n\n        this.updateInputStatus({emitEvents: false});\n        this._regHandle = this._submitGroup && this._submitGroup.addSubmittable(this);\n    }\n\n    ngOnDestroy() {\n        if (this._regHandle) {\n            this._regHandle.unregister();\n            delete this._regHandle;\n        }\n        if (this._stateSubscr) {\n            this._stateSubscr.unsubscribe();\n            delete this._stateSubscr;\n        }\n        if (this._preSubmitSubscr) {\n            this._preSubmitSubscr.unsubscribe();\n            delete this._preSubmitSubscr;\n        }\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: '[ngModel],[formControl],[formControlName]'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgControl, decorators: [{ type: Host }, ]},\n{type: SubmitGroup, decorators: [{ type: Optional }, ]},\n{type: SubmitService, decorators: [{ type: Optional }, ]},\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}